[uwsgi]

;
;reload-on-rss = 2048
;evil-reload-on-as = 2048
;evil-reload-on-rss = 2048
;
;http-timeout = 300
;socket-timeout = 300

;project=EasyDoc
;uid=www-data
;gid=www-data
;base=/EasyDoc/

chdir=/EasyDoc

#设置工作进程使用虚拟内存超过N MB就回收重启
;env = DJANGO_SETTINGS_MODULE=%(project).settings
;wsgi-file=EasyDoc/wsgi.py
module=EasyDoc.wsgi:application
master = true
;processes = 5
;threads = 30
enable-threads = true

socket=0.0.0.0:80
;http = 0.0.0.0:80
;chown-socket=%(uid):www-data
chmod-socket=664
;
vacuum=True
max-requests=5000
;
;logto = /EasyDoc/log/uwsgi_log.log

#设置一个请求的超时时间(秒)，如果一个请求超过了这个时间，则请求被丢弃
;harakiri = 60
;post buffering = 8192
;buffer-size= 65535
#当一个请求被harakiri杀掉会，会输出一条日志
;harakiri-verbose = true

#开启内存使用情况报告
memory-report = true

#设置平滑的重启（直到处理完接收到的请求）的长等待时间(秒)
;reload-mercy = 10

#设置工作进程使用虚拟内存超过N MB就回收重启
reload-on-as= 2048

#设置平滑的重启（直到处理完接收到的请求）的长等待时间(秒)
;worker-reload-mercy = 5


#配置存放主进程的进程号文件
;pidfile=%(base)/config/uwsgi/%(project)_uwsgi.pid
#配置dump日志记录
daemonize=%(chdir)/log/%(project)-uwsgi.log